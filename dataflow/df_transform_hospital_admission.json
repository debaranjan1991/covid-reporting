{
	"name": "df_transform_hospital_admission",
	"properties": {
		"folder": {
			"name": "Transform"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_hospital_admission_raw_csv",
						"type": "DatasetReference"
					},
					"name": "hospitalAdmission"
				},
				{
					"dataset": {
						"referenceName": "ds_country_code_lookup",
						"type": "DatasetReference"
					},
					"name": "countryCodeFile"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date_lookup",
						"type": "DatasetReference"
					},
					"name": "dimDateSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_admission_daily",
						"type": "DatasetReference"
					},
					"name": "sinkDailyFile"
				},
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_admission_weekly",
						"type": "DatasetReference"
					},
					"name": "sinkWeeklyFile"
				}
			],
			"transformations": [
				{
					"name": "selectedColumns"
				},
				{
					"name": "lookupCountryCode"
				},
				{
					"name": "removeDuplicateColumns"
				},
				{
					"name": "splitDailyAndWeekly"
				},
				{
					"name": "newDerivedECDC"
				},
				{
					"name": "aggregateYearWeek"
				},
				{
					"name": "joinDimDate"
				},
				{
					"name": "selectWeeklycolumns"
				},
				{
					"name": "pivotDailyDataColumns"
				},
				{
					"name": "pivotWeeklyDailyColumn"
				},
				{
					"name": "selectDailyFinalColumns"
				},
				{
					"name": "selectWeeklyFinalColumns"
				},
				{
					"name": "sortWeekly"
				},
				{
					"name": "sortDaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> hospitalAdmission",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countryCodeFile",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dimDateSource",
				"hospitalAdmission select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectedColumns",
				"selectedColumns, countryCodeFile lookup(selectedColumns@country == countryCodeFile@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountryCode",
				"lookupCountryCode select(mapColumn(",
				"          country = selectedColumns@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeDuplicateColumns",
				"removeDuplicateColumns split(or(indicator == 'Daily hospital occupancy', indicator == 'Daily ICU occupancy'),",
				"     disjoint: false) ~> splitDailyAndWeekly@(Daily, Weekly)",
				"dimDateSource derive(ECDC_year_week = year + '-W' + lpad(week_of_year, 2, '0')) ~> newDerivedECDC",
				"newDerivedECDC aggregate(groupBy(ECDC_year_week),",
				"     ECDC_start_date = min(date),",
				"          ECDC_end_date = max(date)) ~> aggregateYearWeek",
				"splitDailyAndWeekly@Weekly, aggregateYearWeek join(reported_year_week == ECDC_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDimDate",
				"joinDimDate select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          indicator,",
				"          reported_year_week,",
				"          ECDC_start_date,",
				"          ECDC_end_date,",
				"          value,",
				"          source,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectWeeklycolumns",
				"splitDailyAndWeekly@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reported_date,",
				"          source,",
				"          population),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     count = sum(value),",
				"     columnNaming: '$V$N',",
				"     lateral: true) ~> pivotDailyDataColumns",
				"selectWeeklycolumns pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reported_year_week,",
				"          ECDC_start_date,",
				"          ECDC_end_date,",
				"          source,",
				"          population),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     count = sum(value),",
				"     columnNaming: '$V$N',",
				"     lateral: true) ~> pivotWeeklyDailyColumn",
				"sortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reported_date,",
				"          source,",
				"          population,",
				"          Daily_hospital_occupancy_count = {Daily hospital occupancycount},",
				"          Daily_ICU_occupancy_count = {Daily ICU occupancycount}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDailyFinalColumns",
				"sortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          reported_year_week,",
				"          week_start_date = ECDC_start_date,",
				"          week_end_date = ECDC_end_date,",
				"          source,",
				"          population,",
				"          Weekly_hospital_occupancy_count_per100K = {Weekly new hospital admissions per 100kcount},",
				"          Weekly_ICU_occupancy_count_per100K = {Weekly new ICU admissions per 100kcount}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectWeeklyFinalColumns",
				"pivotWeeklyDailyColumn sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> sortWeekly",
				"pivotDailyDataColumns sort(desc(reported_date, true),",
				"     asc(country, true)) ~> sortDaily",
				"selectDailyFinalColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDailyFile",
				"selectWeeklyFinalColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkWeeklyFile"
			]
		}
	}
}