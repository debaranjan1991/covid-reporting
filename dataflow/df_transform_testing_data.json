{
	"name": "df_transform_testing_data",
	"properties": {
		"folder": {
			"name": "Transform"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_testing_data",
						"type": "DatasetReference"
					},
					"name": "rawTestingData"
				},
				{
					"dataset": {
						"referenceName": "ds_country_code_lookup",
						"type": "DatasetReference"
					},
					"name": "countryCode"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date_lookup",
						"type": "DatasetReference"
					},
					"name": "dateDimentionLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_testing_data",
						"type": "DatasetReference"
					},
					"name": "processedTestinfData"
				}
			],
			"transformations": [
				{
					"name": "dateLookup"
				},
				{
					"name": "countryCodeLookup"
				},
				{
					"name": "selectFinalColumns"
				},
				{
					"name": "weekStartDateEndDate"
				},
				{
					"name": "changeRatesToDecimal"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          year_week as string,",
				"          new_cases as string,",
				"          tests_done as string,",
				"          population as string,",
				"          testing_rate as string,",
				"          positivity_rate as string,",
				"          testing_data_source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> rawTestingData",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countryCode",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> dateDimentionLookup",
				"rawTestingData, weekStartDateEndDate lookup(year_week == ECDC_year_week,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> dateLookup",
				"dateLookup, countryCode lookup(country_code == country_code_2_digit,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> countryCodeLookup",
				"changeRatesToDecimal select(mapColumn(",
				"          country = rawTestingData@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          year_week,",
				"          week_start_date,",
				"          week_end_date,",
				"          new_cases,",
				"          tests_done,",
				"          population = rawTestingData@population,",
				"          testing_rate,",
				"          positivity_rate,",
				"          source = testing_data_source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFinalColumns",
				"dateDimentionLookup aggregate(groupBy(ECDC_year_week = concat(concat(year,'-W'),lpad(week_of_year,2,'0'))),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> weekStartDateEndDate",
				"countryCodeLookup derive(testing_rate = round(toDecimal(testing_rate, 5, 2, \"###.##\"), 2),",
				"          positivity_rate = round(toDecimal(positivity_rate, 5, 2, \"###.##\"),2)) ~> changeRatesToDecimal",
				"selectFinalColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> processedTestinfData"
			]
		}
	}
}