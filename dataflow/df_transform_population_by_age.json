{
	"name": "df_transform_population_by_age",
	"properties": {
		"folder": {
			"name": "Transform"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_population_by_age_raw",
						"type": "DatasetReference"
					},
					"name": "rawPopulationByAge"
				},
				{
					"dataset": {
						"referenceName": "ds_country_code_lookup",
						"type": "DatasetReference"
					},
					"name": "countyCodeLookup"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_population_data",
						"type": "DatasetReference"
					},
					"name": "processedPopulation"
				}
			],
			"transformations": [
				{
					"name": "addNewColumn"
				},
				{
					"name": "selectColumns"
				},
				{
					"name": "pivotAgeGroup"
				},
				{
					"name": "filterCountryCode2Chars"
				},
				{
					"name": "countryCodeLookup"
				},
				{
					"name": "selectFinalColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {indic_de,geo\\time} as string,",
				"          {2008 } as string,",
				"          {2009 } as string,",
				"          {2010 } as string,",
				"          {2011 } as string,",
				"          {2012 } as string,",
				"          {2013 } as string,",
				"          {2014 } as string,",
				"          {2015 } as string,",
				"          {2016 } as string,",
				"          {2017 } as string,",
				"          {2018 } as string,",
				"          {2019 } as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> rawPopulationByAge",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countyCodeLookup",
				"rawPopulationByAge derive(age_group = replace((split({indic_de,geo\\time},','))[1], 'PC_', ''),",
				"          country_code = (split({indic_de,geo\\time},','))[2],",
				"          year_2019 = toDouble(regexReplace({2019 }, '[a-z]', ''), '####.00')) ~> addNewColumn",
				"addNewColumn select(mapColumn(",
				"          country_code,",
				"          age_group,",
				"          percentage_2019 = year_2019",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumns",
				"selectColumns pivot(groupBy(country_code),",
				"     pivotBy(age_group, ['Y0_14', 'Y15_24', 'Y25_49', 'Y50_64', 'Y65_79', 'Y80_MAX']),",
				"     {} = sum(percentage_2019),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotAgeGroup",
				"pivotAgeGroup filter(length(country_code) == 2) ~> filterCountryCode2Chars",
				"filterCountryCode2Chars, countyCodeLookup lookup(country_code == country_code_2_digit,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> countryCodeLookup",
				"countryCodeLookup select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          age_group_0_14 = Y0_14,",
				"          age_group_15_24 = Y15_24,",
				"          age_group_25_49 = Y25_49,",
				"          age_group_50_64 = Y50_64,",
				"          age_group_65_79 = Y65_79,",
				"          age_group_80_max = Y80_MAX",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFinalColumns",
				"selectFinalColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> processedPopulation"
			]
		}
	}
}